19  Computational thinking and problem-solving
19.1 Algorithms
Show understanding of linear and binary searching methods
Write an algorithm to implement a linear search
Write an algorithm to implement a binary search
The conditions necessary for the use of a binary search
Show understanding of insertion sort and bubble sort methods
Write an algorithm to implement an insertion sort
Write an algorithm to implement a bubble sort
Performance of a sorting routine may depend on the initial order of the data and the number of data items
Show understanding of and use Abstract Data Types (ADT)
Write algorithms to find an item in each of the following: linked list, binary tree
Write algorithms to insert an item into each of the following: stack, queue, linked list, binary tree
Write algorithms to delete an item from each of the following: stack, queue, linked list
Show understanding that a graph is an example of an ADT. Describe the key features of a graph and justify its use for a given situation
Candidates will not be required to write code for this structure.
Show how it is possible for ADTs to be implemented from another ADT
Describe the following ADTs and demonstrate how they can be implemented from appropriate built-in types or other ADTs: stack, queue, linked list, dictionary, binary tree
Show understanding that different algorithms which perform the same task can be compared by using criteria (e.g. time taken to complete the task and memory used)
Including use of Big O notation to specify time and space complexity
19.2 Recursion
Show understanding of recursion
Essential features of recursion.
How recursion is expressed in a programming language.
Write and trace recursive algorithms
When the use of recursion is beneficial
Show awareness of what a compiler has to do to translate recursive programming code
Use of stacks and unwinding
20  Further Programming
20.1 Programming Paradigms
Understanding what is meant by a programming paradigm
Show understanding of the characteristics of a number of programming paradigms
low-level
understanding of and ability to write low-level code that uses various addressing modes: immediate, direct, indirect, indexed and relative
Imperative (Procedural)
Assumed knowledge and understanding of Structural Programming (see details in AS content section 11.3)
understanding of and ability to write imperative (procedural) programming code that uses variabes, constructs, procedures and functions. See details in AS Content
Object Oriented
• understanding of the terminology associated with OOP (including objects, properties, methods, classes, inheritance, polymorphism, containment (aggregation), encapsulation, getters, setters, instances)
• understanding of how to solve a problem by designing appropriate classes
understanding of and ability to write code that demonstrates the use of OOP
Declarative
• understanding of and ability to solve a problem by writing appropriate facts and rules based on supplied information
• understanding of and ability to write code that can satisfy a goal using facts and rules
20.2 File Processing and Exception Handling
Write code to perform file-processing operations
Open (in read, write, append mode) and close a file
Read a record from a file and write a record to a file Perform file-processing operations on serial, sequential, random files
Show understanding of an exception and the importance of exception handling
Know when it is appropriate to use exception handling Write program code to use exception handling